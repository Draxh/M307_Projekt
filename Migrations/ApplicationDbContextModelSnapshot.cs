// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gamingWebshop.Data;

namespace gamingWebshop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("gamingWebshop.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new { CategoryId = 1L, CategoryName = "accusamus-aspernatur-quia-maiores-distinctio-et-saepe-odit" },
                        new { CategoryId = 2L, CategoryName = "voluptas-aliquid-sit-qui-sequi-repellat-possimus-illo" },
                        new { CategoryId = 3L, CategoryName = "harum-qui-quia-saepe-hic-est-voluptatem-rerum" }
                    );
                });

            modelBuilder.Entity("gamingWebshop.Models.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<double>("Price");

                    b.Property<string>("ProductName");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1L, CategoryId = 1L, Description = "voluptates-qui-autem-odit-consectetur-quia-omnis-sint", Price = 8.0, ProductName = "dignissimos-ipsum-magnam-aut-quia-vel-dolores-hic" },
                        new { ProductId = 2L, CategoryId = 1L, Description = "dignissimos-quidem-quae-in-ad-beatae-fuga-et", Price = 8.0, ProductName = "exercitationem-eum-dolor-aspernatur-qui-est-inventore-maiores" },
                        new { ProductId = 3L, CategoryId = 1L, Description = "debitis-ducimus-fuga-qui-beatae-rerum-enim-aut", Price = 8.0, ProductName = "nulla-corporis-ab-error-molestiae-qui-reprehenderit-earum" },
                        new { ProductId = 4L, CategoryId = 1L, Description = "aut-ut-expedita-corrupti-suscipit-iste-tempore-eum", Price = 8.0, ProductName = "voluptatibus-quaerat-molestias-eos-dolor-commodi-eos-fugiat" },
                        new { ProductId = 5L, CategoryId = 1L, Description = "odio-voluptas-modi-optio-maiores-sit-voluptates-aut", Price = 8.0, ProductName = "adipisci-neque-voluptatem-necessitatibus-consequuntur-maiores-corrupti-nulla" },
                        new { ProductId = 6L, CategoryId = 1L, Description = "odio-eius-blanditiis-neque-autem-et-id-voluptatem", Price = 8.0, ProductName = "quia-labore-deserunt-sit-sunt-corrupti-ducimus-deleniti" },
                        new { ProductId = 7L, CategoryId = 1L, Description = "est-distinctio-cumque-laboriosam-qui-dolorem-nulla-omnis", Price = 8.0, ProductName = "omnis-autem-provident-repudiandae-autem-nihil-soluta-asperiores" },
                        new { ProductId = 8L, CategoryId = 1L, Description = "porro-repellendus-ducimus-et-provident-quia-illo-provident", Price = 8.0, ProductName = "ex-at-neque-explicabo-sapiente-expedita-quaerat-impedit" },
                        new { ProductId = 9L, CategoryId = 1L, Description = "natus-mollitia-et-voluptates-repellendus-aut-laboriosam-ad", Price = 8.0, ProductName = "ut-et-et-adipisci-quibusdam-asperiores-et-eveniet" },
                        new { ProductId = 10L, CategoryId = 1L, Description = "provident-dolorem-velit-deserunt-reiciendis-est-laudantium-ducimus", Price = 8.0, ProductName = "quis-cum-aut-earum-quod-excepturi-ex-sed" },
                        new { ProductId = 11L, CategoryId = 1L, Description = "nihil-voluptatem-provident-consequatur-velit-ut-et-id", Price = 8.0, ProductName = "est-dolorem-aut-labore-et-et-reiciendis-commodi" },
                        new { ProductId = 12L, CategoryId = 1L, Description = "unde-et-distinctio-aut-quibusdam-quo-et-temporibus", Price = 8.0, ProductName = "ducimus-quia-sed-at-occaecati-fugit-temporibus-est" },
                        new { ProductId = 13L, CategoryId = 1L, Description = "optio-dignissimos-occaecati-deleniti-reiciendis-doloribus-impedit-amet", Price = 8.0, ProductName = "dolores-quibusdam-corporis-et-aut-aut-doloremque-porro" },
                        new { ProductId = 14L, CategoryId = 1L, Description = "vel-autem-est-dignissimos-asperiores-consequatur-error-qui", Price = 8.0, ProductName = "ut-deserunt-ratione-et-ut-est-non-quos" },
                        new { ProductId = 15L, CategoryId = 1L, Description = "ratione-illum-nesciunt-architecto-deserunt-enim-placeat-natus", Price = 8.0, ProductName = "laboriosam-maxime-incidunt-laborum-ipsa-nemo-mollitia-nisi" },
                        new { ProductId = 16L, CategoryId = 1L, Description = "accusamus-consequatur-labore-quidem-velit-officia-est-eligendi", Price = 8.0, ProductName = "explicabo-voluptatum-architecto-sed-eligendi-quia-omnis-cupiditate" },
                        new { ProductId = 17L, CategoryId = 1L, Description = "repellat-et-expedita-esse-qui-at-ut-et", Price = 8.0, ProductName = "debitis-itaque-eos-incidunt-possimus-explicabo-qui-mollitia" },
                        new { ProductId = 18L, CategoryId = 1L, Description = "consectetur-nihil-maxime-incidunt-et-sapiente-recusandae-iste", Price = 8.0, ProductName = "fuga-magni-aliquid-occaecati-non-commodi-necessitatibus-eius" },
                        new { ProductId = 19L, CategoryId = 1L, Description = "suscipit-voluptatum-quia-saepe-laudantium-eos-architecto-perferendis", Price = 8.0, ProductName = "explicabo-laudantium-adipisci-expedita-quia-occaecati-et-repellat" },
                        new { ProductId = 20L, CategoryId = 1L, Description = "quae-sint-ipsa-ab-aliquid-voluptates-non-aperiam", Price = 8.0, ProductName = "voluptates-ipsum-aut-veniam-labore-quia-omnis-sint" }
                    );
                });

            modelBuilder.Entity("gamingWebshop.Models.ShoppingCart", b =>
                {
                    b.Property<long>("ShoppingCartId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ProductId");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new { ShoppingCartId = 1L },
                        new { ShoppingCartId = 2L },
                        new { ShoppingCartId = 3L },
                        new { ShoppingCartId = 4L },
                        new { ShoppingCartId = 5L },
                        new { ShoppingCartId = 6L },
                        new { ShoppingCartId = 7L },
                        new { ShoppingCartId = 8L },
                        new { ShoppingCartId = 9L },
                        new { ShoppingCartId = 10L },
                        new { ShoppingCartId = 11L },
                        new { ShoppingCartId = 12L },
                        new { ShoppingCartId = 13L },
                        new { ShoppingCartId = 14L },
                        new { ShoppingCartId = 15L },
                        new { ShoppingCartId = 16L },
                        new { ShoppingCartId = 17L },
                        new { ShoppingCartId = 18L },
                        new { ShoppingCartId = 19L },
                        new { ShoppingCartId = 20L }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("gamingWebshop.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<long?>("ShoppingCartId");

                    b.Property<long>("UserId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("gamingWebshop.Models.Product", b =>
                {
                    b.HasOne("gamingWebshop.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("gamingWebshop.Models.ShoppingCart", b =>
                {
                    b.HasOne("gamingWebshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("gamingWebshop.Models.User", b =>
                {
                    b.HasOne("gamingWebshop.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId");
                });
#pragma warning restore 612, 618
        }
    }
}
